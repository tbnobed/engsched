# Database Configuration
POSTGRES_USER=technician_scheduler_user
POSTGRES_PASSWORD=change_this_password_in_production  # Change this!
POSTGRES_DB=technician_scheduler
POSTGRES_HOST=db
POSTGRES_PORT=5432

# Flask Configuration
FLASK_APP=main.py
FLASK_SECRET_KEY=generate_this_using_secrets_token_hex  # Generate using: python -c "import secrets; print(secrets.token_hex(32))"
FLASK_ENV=production

# Database URL (constructed from above variables)
DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}

# Email Configuration
SENDGRID_API_KEY=your_sendgrid_api_key_here  # Get this from SendGrid dashboard
SENDGRID_FROM_EMAIL=alerts@yourdomain.com  # Must be verified in SendGrid - used as "from" address for all emails
EMAIL_DOMAIN=your-domain.com  # Change to your domain for email links

# Site Branding Configuration
SITE_NAME="Plex Engineering"
SITE_TITLE="Tech Scheduler"
SITE_DESCRIPTION="Technician Scheduling and Management System"
COMPANY_NAME="Plex Engineering"
SITE_LOGO="images/tbn_logo.webp"

# Chat Configuration
CHAT_ENABLED=true
CHAT_URL=https://dev.blabb.me/room/379lfh

# Studio Booking API Configuration
STUDIO_BOOKING_API_URL=https://plex.bookstud.io

# Email-to-Ticket Configuration
# Configure these in SendGrid Inbound Parse settings:
# - Subdomain: mail1.opscal.io (point MX record to mx.sendgrid.net)
# - Webhook URL: https://your-app-domain.com/api/inbound-email
# Emails sent to any address @mail1.opscal.io will create tickets

# Additional Security Notes:
# 1. Never commit the actual .env file to version control
# 2. Use strong passwords for database credentials
# 3. Generate a unique FLASK_SECRET_KEY for each deployment
# 4. Keep this file template up to date with any new environment variables
# 5. Ensure your SendGrid sender email (configured in SENDGRID_FROM_EMAIL) is verified in SendGrid
# 6. For production, ensure all domains are properly configured in SendGrid
# 7. Consider implementing rate limiting for email notifications
# 8. Back up your database regularly using the backup volume mounted in docker-compose.yml

# Automatic Scheduling Notes:
# - The application includes automatic recurring schedule generation
# - Schedules are automatically generated every Sunday at 2:00 AM for active templates
# - No additional configuration needed - the scheduler starts automatically with the app
# - Check application logs for scheduler activity and automatic generation events